/* @import used for importing external stylesheets */
@import url("https://fonts.googleapis.com/css2?family=Kaushan+Script&display=swap");
/* font-family: "Kaushan Script", cursive; */

/* always go from most general to most specific */
* {
  margin: 0;
  padding: 0;
}

html {
  /* this is how we gt a full sized fixed centered background */
  /* don't repeat, center X, center Y, fixed in center */
  background: url("../img/bg.jpg") no-repeat center center fixed;
  /* cover: covers entire webpage */
  background-size: cover;
}

/* apply default font style at the body tag and all children elements will inherit
 it unless we override it with another style further down */
body {
  font-family: "Kaushan Script", cursive;
}

/* NAVIGATION */
header {
  width: 80%;
  padding: 0 10%;
  height: 50px;
  overflow-y: hidden;
  position: fixed;
  top: 0;
  left: 0;
  margin-bottom: 10px;
  /* increase z-index to pull items forward, decrease to push it back */
  z-index: 10;
  background-color: gray;
  /* flexbox properties */
  /* flexbox container property */
  display: flex;
  flex-direction: row;
  /* creates space between content in nav bar */
  justify-content: space-between;
  align-items: center;
  background: url("../img/crossline-dots.png");
}

header h1 {
  color: blue;
}

nav ul {
  /* makes all the li items stack next to eachtoher */
  display: flex;
  list-style-type: none;
  text-align: center;
  background-color: rgba(20, 20, 20, 0.1);
}

nav li {
  font-size: 18px;
  height: 50px;
  line-height: 50px;
  width: 120px;
}

nav a {
  text-decoration: none;
  color: blue;
  display: block;
  /* We always define our transition on the initial style */
  transition: all 1s;
}

/* Special state for the anchor tag - suedo class selector */
nav a:hover {
  /* These properties will animate bc of the transition above */
  background-color: blueviolet;
  color: cornflowerblue;
}

nav a.active {
  background-color: white;
  color: red;
}

/* GALLERY */
.container {
  width: 900px;
  margin: 100px auto;
  /* when we use inline block to stack things, we have to zero out 
the font size on the container element */
  font-size: 0;
}

.polaroid {
  /* if you want width to be 300 but have a margin of 20, must subtract 20 from each side */
  width: 260px;
  margin: 20px;
  display: inline-block;
  /* WHENEVER YOU WANT A CHILD ELEMENT TO POSITION WITHIN A PARENT
  ELEMENT, YOU HAVE TO RELATIVE POSITION THAT PARENT NOT ABSOLUTE */
  position: relative;
}

/* polaroid img tag */
/* whenever you style your image, it's usually best practice to 
make the image take up 100% of its parent element and then give
the parent a width and height */
.polaroid img {
  width: 100%;
  /* height auto preserves the pixel aspect ratio */
  height: auto;
  /* border shorthand is 1- width, style, color */
  border: 10px solid #ccc;
  border-bottom-width: 45px;
}

/* polaroid <p> tag */
.polaroid p {
  font-size: 1rem;
  /* absolutely positioned to its parent class (polaroid),
  which should be positioned relative */
  position: absolute;
  bottom: 14px;
  width: 280px;
  text-align: center;
  color: #333;
}

/* TRANSFORMS */
.scaleUp {
  /* scale up 150% */
  transform: scale(1.5);
  /* pulls up 10 positions */
  z-index: 10;
}

.scaleX {
  /* twice as wide in the x direction */
  /* transform: scaleX(2); */
  z-index: 10;
  /* scale(x-pos, y-pos) */
  transform: scale(2, 1);
}

.scaleY {
  /* scales Y direction up by 200% */
  transform: scale(1, 2);
}

.skewX {
  transform: skewX(-20deg);
}

.skewY {
  transform: skewY(-20deg);
}

.skewBoth {
  transform: skew(10deg, 30deg);
}

.rotX {
  transform: rotateX(180deg);
}

.rotY {
  transform: rotateY(180deg);
}

.rotZ {
  transform: rotateZ(120deg);
}

.rotateLeft {
  transform: rotate(-20deg);
  /*  */
  transition: all 5s ease-in-out;
}

/* adding a hover state to rotateLeft */
.rotateLeft:hover {
  transform: rotate(20deg);
  cursor: pointer;
}

.skewHover {
  transform: skewX(-30deg);
  transition: all 5s ease;
}

/* hover state to skewHover */
.skewHover:hover {
  transform: skewX(30deg);
}

.scaleHover {
  transform: scale(0.5);
  transition: all 5s ease-in;
}

.scaleHover:hover {
  transform: scale(1.5);
}

.colorSwap {
  /* original filter */
  filter: grayscale(100%);
  transition: all 2s ease-out;
}

.colorSwap:hover {
  /* new filter upon hover */
  filter: grayscale(0);
}
